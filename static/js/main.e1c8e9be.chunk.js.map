{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/searchbox/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","Monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","monsters","inherits","createClass","_this2","fetch","then","Response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_components_SearchBox","card_list_components_CardList","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"wRAGaA,eAAO,SAACC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAE,4BAChER,EAAAC,EAAAC,cAAA,UAAI,KAAGH,EAAMQ,QAAQE,KAAK,KAC1BT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,UCDbC,EAAW,SAACZ,GAAK,OAC1BC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,aAERJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OACtBP,EAAAC,EAAAC,cAACY,EAAI,CAACC,IAAKR,EAAQC,GAAID,QAASA,QCNnCS,SAAY,SAAHC,GAAA,IAAMC,EAAWD,EAAXC,YAAaC,EAAYF,EAAZE,aAAY,OACjDnB,EAAAC,EAAAC,cAAA,SACAC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCCG,SA5CN,SAAAC,GACP,SAAAD,IAAc,IAAAE,EAQZ,OARYC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAWFR,aAAe,SAAAY,GACbP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAVtCX,EAAKY,MAAQ,CACXC,SAAU,GACVJ,YAAY,IAGdT,EAgCD,OAzCMC,OAAAa,EAAA,EAAAb,CAAAH,EAAAC,GAUNE,OAAAc,EAAA,EAAAd,CAAAH,EAAA,EAAAP,IAAA,oBAAAoB,MAAA,WAMmB,IAAAK,EAAAb,KAClBc,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKR,SAAS,CAAEK,SAAUQ,QAC5C,CAAA9B,IAAA,SAAAoB,MAAA,WAEQ,IAAAW,EACwBnB,KAAKS,MAA5BC,EAAQS,EAART,SAASJ,EAAWa,EAAXb,YACXc,EAAiBV,EAASW,OAAO,SAAAzC,GAAO,OAC5CA,EAAQE,KAAKwC,cAAcC,SAASjB,EAAYgB,iBAElD,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAI,sBACHF,EAAAC,EAAAC,cAACiD,EAAS,CACVjC,YAAY,kBACZC,aAAcQ,KAAKR,eAEpBnB,EAAAC,EAAAC,cAACkD,EAAQ,CAACxC,SAAUmC,GAEhBpB,KAAKS,MAAMC,SAASxB,IAAI,SAAAN,GAAO,OAAKP,EAAAC,EAAAC,cAAA,MAAIa,IAAKR,EAAQC,IAAI,IAAED,EAAQE,KAAK,aAKjFa,EAzCM,CAAS+B,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAAW,KAAAe,EAAAC,KAAA,UAAqBhB,KAAK,SAAAzB,GAAiD,IAA9C0C,EAAM1C,EAAN0C,OAAQC,EAAM3C,EAAN2C,OAAQC,EAAM5C,EAAN4C,OAAQC,EAAM7C,EAAN6C,OAAQC,EAAO9C,EAAP8C,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpE,EAAAC,EAAAC,cAACF,EAAAC,EAAMoE,WAAU,KACfrE,EAAAC,EAAAC,cAACoE,EAAG,QAcRhB","file":"static/js/main.e1c8e9be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>  {props.monster.name} </h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from \"../card/card.component\";\r\n\r\n\r\n\r\nexport const CardList = (props) => (\r\n    < div className=\"card-list\">\r\n        {\r\n            props.Monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n    </div>\r\n);","import React from \"react\";\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>(\r\n    <input\r\n    className=\"search\"\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.components';\nimport { SearchBox } from './components/searchbox/search-box.components';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n\n    // this.handleChange=this.handleChange.bind(this);\n  }\n\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(Response => Response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n \n  render() {\n    const { monsters,searchField }=this.state;\n    const filteredMonsters=monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n         <SearchBox\n         placeholder='Search Monsters'\n         handleChange={this.handleChange}\n         />\n        <CardList Monsters={filteredMonsters}>\n          {\n            this.state.monsters.map(monster => (<h1 key={monster.id}> {monster.name} </h1>))\n          }\n        </CardList>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}